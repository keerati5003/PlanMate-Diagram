@startuml

interface StudyPreferenceDao {
    +savePreference(preference: StudyPreference): StudyPreference
    +findByUserUid(userUid: String): StudyPreference
}

interface TermDao {
    +save(term: Term): Term
    +findByUser(user: User): Term
    +findById(id: Long): Optional<Term>
    +getCurrentTerm(): Optional<Term>
}

interface TopicDao {
    +save(topic: Topic): Topic
    +saveAll(topics: List<Topic>): void
    +findByCourse(course: Course): List<Topic>
    +findById(topicId: String): Topic
    +deleteByCourse(existingCourse: Course): void
    +existsById(id: String): boolean
    +deleteById(existingId: String): void
}

interface UserDao {
    +save(user: User): User
    +findByUid(uid: String): User
    +findByEmail(email: String): Optional<User>
}

' === DAO IMPLEMENTATIONS ===

class StudyPreferenceDaoImpl {
    - studyPreferenceRepository: StudyPreferenceRepository
}
class TermDaoImpl {
    - termRepository: TermRepository
}
class TopicDaoImpl {
    - topicRepository: TopicRepository
}
class UserDaoImpl {
    - userRepository: UserRepository
}

' === RELATIONSHIPS ===
StudyPreferenceDaoImpl ..|> StudyPreferenceDao
TermDaoImpl ..|> TermDao
TopicDaoImpl ..|> TopicDao
UserDaoImpl ..|> UserDao

@enduml

@startuml

' === DAO INTERFACES ===

interface AssignmentDao {
    +save(assignment: Assignment): void
    +saveAll(assignments: List<Assignment>): void
    +findByCourse(course: Course): List<Assignment>
    +deleteByCourse(existingCourse: Course): void
    +existsById(id: String): boolean
    +findById(id: String): Assignment
    +deleteAll(values: Collection<Assignment>): void
    +delete(existingAssignment: Assignment): void
}

interface AvailabilityDao {
    +save(availability: Availability): Availability
    +saveAll(availabilities: List<Availability>): void
    +findByUser(user: User): List<Availability>
    +deleteByUser(user: User): void
}

interface CourseDao {
    +save(course: Course): Course
    +saveAll(courses: List<Course>): void
    +findByTerm(term: Term): List<Course>
    +findById(courseId: Long): Course
    +delete(existingCourse: Course): void
    +flush(): void
}

interface ExamDao {
    +save(exam: Exam): void
    +saveAll(exams: List<Exam>): void
    +findByCourse(course: Course): List<Exam>
    +deleteByCourse(existingCourse: Course): void
    +existsById(id: String): boolean
    +findById(id: String): Exam
    +deleteAll(values: Collection<Exam>): void
    +delete(existingExam: Exam): void
}

interface ScheduleDao {
    +findByUser(user: User): List<Schedule>
    +save(schedule: Schedule): Schedule
}

class AssignmentDaoImpl {
    - assignmentRepository: AssignmentRepository
}
class AvailabilityDaoImpl {
    - availabilityRepository: AvailabilityRepository
}
class CourseDaoImpl {
    - courseRepository: CourseRepository
}
class ExamDaoImpl {
    - examRepository: ExamRepository
}
class ScheduleDaoImpl {
    - scheduleRepository: ScheduleRepository
}

AssignmentDaoImpl ..|> AssignmentDao
AvailabilityDaoImpl ..|> AvailabilityDao
CourseDaoImpl ..|> CourseDao
ExamDaoImpl ..|> ExamDao
ScheduleDaoImpl ..|> ScheduleDao

@enduml