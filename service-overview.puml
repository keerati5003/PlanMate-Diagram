@startuml
skinparam dpi 150
skinparam classAttributeIconSize 0
skinparam linetype ortho
title Service and Implementation Overview (Using DAO)

interface UserService {
  + save(user: User): User
  + findByUid(uid: String): User
}
class UserServiceImpl {
  - userDao: UserDao
  + save(user: User): User
  + findByUid(uid: String): User
}

interface TopicService {
  + save(topic: Topic): void
  + saveAll(topics: List<Topic>): void
}
class TopicServiceImpl {
  - topicDao: TopicDao
  + save(topic: Topic): void
  + saveAll(topics: List<Topic>): void
}

interface TermService {
  + save(term: Term): void
}
class TermServiceImpl {
  - termDao: TermDao
  + save(term: Term): void
}

interface StudySetupService {
  + processStudySetup(userUid: String, dto: StudySetupDTO): void
  + getStudySetup(userUid: String): StudySetupDTO
}
class StudySetupServiceImpl {
  - userDao: UserDao
  - courseDao: CourseDao
  - topicDao: TopicDao
  - examDao: ExamDao
  - assignmentDao: AssignmentDao
  - availabilityDao: AvailabilityDao
  + processStudySetup(userUid: String, dto: StudySetupDTO): void
  + getStudySetup(userUid: String): StudySetupDTO
}

interface StudyPreferenceService {
  + getPreference(userUid: String): Optional<StudyPreferenceDTO>
  + saveOrUpdate(userUid: String, dto: StudyPreferenceDTO): StudyPreferenceDTO
}
class StudyPreferenceServiceImpl {
  - studyPreferenceDao: StudyPreferenceDao
  - studyPreferenceMapper: StudyPreferenceMapper
  + getPreference(userUid: String): Optional<StudyPreferenceDTO>
  + saveOrUpdate(userUid: String, dto: StudyPreferenceDTO): StudyPreferenceDTO
}

interface ExamService {
  + save(exam: Exam): void
  + saveAll(exams: List<Exam>): void
}
class ExamServiceImpl {
  - examDao: ExamDao
  + save(exam: Exam): void
  + saveAll(exams: List<Exam>): void
}

interface CourseService {
  + save(course: Course): void
  + saveAll(courses: List<Course>): void
}
class CourseServiceImpl {
  - courseDao: CourseDao
  + save(course: Course): void
  + saveAll(courses: List<Course>): void
}

interface AvailabilityService {
  + save(availability: Availability): void
  + saveAll(availabilities: List<Availability>): void
}
class AvailabilityServiceImpl {
  - availabilityDao: AvailabilityDao
  + save(availability: Availability): void
  + saveAll(availabilities: List<Availability>): void
}

interface AssignmentService {
  + save(assignment: Assignment): void
  + saveAll(assignments: List<Assignment>): void
}
class AssignmentServiceImpl {
  - assignmentDao: AssignmentDao
  + save(assignment: Assignment): void
  + saveAll(assignments: List<Assignment>): void
}

UserServiceImpl ..|> UserService
TopicServiceImpl ..|> TopicService
TermServiceImpl ..|> TermService
StudySetupServiceImpl ..|> StudySetupService
StudyPreferenceServiceImpl ..|> StudyPreferenceService
ExamServiceImpl ..|> ExamService
CourseServiceImpl ..|> CourseService
AvailabilityServiceImpl ..|> AvailabilityService
AssignmentServiceImpl ..|> AssignmentService

@enduml