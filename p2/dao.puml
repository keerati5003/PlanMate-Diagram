@startuml

interface StudyGroupDao {
    + save(studyGroup: StudyGroup) : StudyGroup
    + existsByJoinCode(code: String) : boolean
    + findByJoinCode(joinCode: String) : Optional<StudyGroup>
}

interface GroupMemberDao {
    + save(groupMember: GroupMember) : GroupMember
    + existsByUserAndGroup(user: User, group: StudyGroup) : Boolean
    + findByUser(user: User) : List<GroupMember>
    + findByGroupId(groupId: Long) : List<GroupMember>
}

interface FocusSessionDao {
    + save(focusSession: FocusSession) : FocusSession
    + findById(id: String) : FocusSession
    + sumFocusSecondsByUser(uid: String) : long
    + findByUserUidAndStatus(userUid: String, focusStatus: FocusStatus) : FocusSession
}

interface SessionDao {
    + getTodaySessions(user: User) : List<Session>
    + getTomorrowSessions(user: User) : List<Session>
    + getFutureSessions(user: User) : List<Session>
    + save(session: Session) : Session
    + findById(id: String) : Session
    + countTotalPlannedSessionsForUser(uid: String) : int
    + countCompletedSessionsForUser(uid: String) : int
    + getCompletedSessions(user: User) : List<Session>
}

interface StudyAnalyticsDao {
    + countCompletedSessions(userUid: String, range: String, date: LocalDate) : int
    + sumFocusDuration(userUid: String, range: String, date: LocalDate) : long
    + getSubjectBreakdown(userUid: String, range: String, date: LocalDate) : Map<String, Long>
    + getCompletedSessionsWithTimes(userUid: String, range: String, date: LocalDate) : List<Object[]>
}

class StudyGroupDaoImpl {
    - studyGroupRepository : StudyGroupRepository

    + save(studyGroup: StudyGroup) : StudyGroup
    + existsByJoinCode(code: String) : boolean
    + findByJoinCode(joinCode: String) : Optional<StudyGroup>
}

class GroupMemberDaoImpl {
    - groupMemberRepository : GroupMemberRepository

    + save(groupMember: GroupMember) : GroupMember
    + existsByUserAndGroup(user: User, group: StudyGroup) : Boolean
    + findByUser(user: User) : List<GroupMember>
    + findByGroupId(groupId: Long) : List<GroupMember>
}

class FocusSessionDaoImpl {
    - focusSessionRepository : FocusSessionRepository

    + save(focusSession: FocusSession) : FocusSession
    + findById(id: String) : FocusSession
    + sumFocusSecondsByUser(uid: String) : long
    + findByUserUidAndStatus(userUid: String, focusStatus: FocusStatus) : FocusSession
}

class SessionDaoImpl {
    - sessionRepository : SessionRepository

    + getTodaySessions(user: User) : List<Session>
    + getTomorrowSessions(user: User) : List<Session>
    + getFutureSessions(user: User) : List<Session>
    + save(session: Session) : Session
    + findById(id: String) : Session
    + countTotalPlannedSessionsForUser(uid: String) : int
    + countCompletedSessionsForUser(uid: String) : int
    + getCompletedSessions(user: User) : List<Session>
}

class StudyAnalyticsDaoImpl {
    - focusSessionRepository : FocusSessionRepository

    + countCompletedSessions(userUid: String, range: String, date: LocalDate) : int
    + sumFocusDuration(userUid: String, range: String, date: LocalDate) : long
    + getSubjectBreakdown(userUid: String, range: String, date: LocalDate) : Map<String, Long>
    + getCompletedSessionsWithTimes(userUid: String, range: String, date: LocalDate) : List<Object[]>
    - getStartDate(range: String, date: LocalDate) : LocalDateTime
    - getEndDate(range: String, date: LocalDate) : LocalDateTime
}

StudyGroupDaoImpl ..|> StudyGroupDao
GroupMemberDaoImpl ..|> GroupMemberDao
FocusSessionDaoImpl ..|> FocusSessionDao
SessionDaoImpl ..|> SessionDao
StudyAnalyticsDaoImpl ..|> StudyAnalyticsDao

@enduml
