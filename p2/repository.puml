@startuml

interface GroupMemberRepository {
    +existsByUserAndGroup(user: User, group: StudyGroup): Boolean
    +findByUser(user: User): List<GroupMember>
    +findByGroupId(groupId: Long): List<GroupMember>
}

interface StudyGroupRepository {
    +existsByJoinCode(code: String): boolean
    +findByJoinCode(joinCode: String): Optional<StudyGroup>
}

interface FocusSessionRepository {
    +countByUserUidAndStatusAndFocusStartBetween(uid: String, status: FocusStatus, start: LocalDateTime, end: LocalDateTime): int
    +sumElapsedSeconds(uid: String, status: FocusStatus, start: LocalDateTime, end: LocalDateTime): long
    +groupByCourseName(uid: String, status: FocusStatus, start: LocalDateTime, end: LocalDateTime): List<Object[]>
    +sumElapsedSecondsByUserUid(uid: String): long
    +findByUserUidAndStatus(userUid: String, focusStatus: FocusStatus): Optional<FocusSession>
    +findCompletedSessionsWithTimes(userUid: String, status: FocusStatus, start: LocalDateTime, end: LocalDateTime): List<Object[]>
}

interface SessionRepository {
    +findBySchedule_UserAndDate(user: User, date: LocalDate): List<Session>
    +findBySchedule_UserAndDateAfter(user: User, date: LocalDate): List<Session>
    +countBySchedule_User_Uid(uid: String): int
    +countBySchedule_User_UidAndFocusSessions_Status(uid: String, status: FocusStatus): int
    +getCompletedSessions(user: User): List<Session>
}

@enduml
