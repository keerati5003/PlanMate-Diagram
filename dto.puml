@startuml
title Complete DTO UML Class Diagram (private fields)

class MemberProfileDTO {
    - id: Long
    - memberId: String
    - displayName: String
    - photoUrl: String
}

class GroupMemberDTO {
    - id: Long
    - user: User
}

class GroupMemberProgressDTO {
    - id: Long
    - member: MemberProfileDTO
    - completedSessions: int
    - totalFocusSeconds: long
    - percentageCompleted: double
    - points: long
}

class GroupRequestDTO {
    - id: Long
    - groupName: String
    - imageUrl: String
}

class StudyGroupResponseDTO {
    - id: Long
    - name: String
    - imageUrl: String
    - joinCode: String
    - members: List<GroupMemberDTO>
}

class NotificationDTO {
    - id: Long
    - title: String
    - content: String
    - isRead: Boolean
    - type: NotificationType
    - time: LocalDateTime
}

class NotificationRequestDTO {
    - id: Long
    - userUid: String
    - title: String
    - content: String
    - type: NotificationType
}

class CourseBaseDTO {
    - id: Long
    - courseCode: String
    - name: String
    - credit: Long
}

class CourseResponseDTO {
    - id: Long
    - courseId: Long
    - topics: List<TopicDTO>
    - assignments: List<AssignmentDTO>
    - exams: List<ExamDTO>
}

class AssignmentDTO {
    - id: Long
    - name: String
    - dueDate: LocalDate
    - dueTime: LocalTime
    - estimatedTime: Long
    - examType: ExamType
    - completed: Boolean
    - associatedTopicIds: List<String>
}

class ExamDTO {
    - id: Long
    - type: ExamType
    - startTime: LocalTime
    - endTime: LocalTime
    - date: LocalDate
}

class TopicDTO {
    - id: Long
    - name: String
    - difficulty: Long
    - confidence: Long
    - estimatedStudyTime: Long
    - examType: ExamType
}

class TermRequestDTO {
    - id: Long
    - name: String
    - startDate: LocalDate
    - endDate: LocalDate
}

class TermResponseDTO {
    - id: Long
    - termId: Long
    - name: String
    - startDate: LocalDate
    - endDate: LocalDate
    - courses: List<CourseResponseDTO>
}

class AvailabilityDTO {
    - id: Long
    - date: LocalDate
    - startTime: LocalTime
    - endTime: LocalTime
}

class AvailabilityRequestDTO {
    - id: Long
    - date: LocalDate
    - startTime: LocalTime
    - endTime: LocalTime
}

class StudyPreferenceDTO {
    - id: Long
    - minSessionDuration: Integer
    - maxSessionDuration: Integer
    - preferredStudyTimes: List<String>
    - revisionFrequency: String
    - breakDurations: Integer
}

class StudySetupDTO {
    - id: Long
    - term: TermResponseDTO
    - availabilities: List<AvailabilityDTO>
}

class GeneratePlanRequestDTO {
    - id: Long
    - studyPreference: StudyPreferenceDTO
    - studySetup: StudySetupDTO
}

class ScheduleDTO {
    - id: Long
    - generatedAt: String
    - examType: ExamType
    - termId: Long
    - studyPlan: List<SessionDTO>
    - unscheduledPlan: List<SessionDTO>
}

class ScheduleViewDTO {
    - id: Long
    - studyPlan: List<SessionViewDTO>
    - unscheduledPlan: List<SessionViewDTO>
}

class SessionDTO {
    - id: Long
    - sessionId: String
    - courseId: Long
    - duration: Long
    - type: SessionType
    - isScheduled: Boolean
    - isCompleted: Boolean
    - sessionNumber: Integer
    - totalSessionsInGroup: Integer
    - date: LocalDate
    - start: String
    - end: String
    - topicId: String
    - assignmentId: String
}

class SessionViewDTO {
    - id: Long
    - sessionId: String
    - courseCode: String
    - topicName: String
    - assignmentName: String
    - date: LocalDate
    - start: String
    - end: String
    - duration: Long
    - type: SessionType
    - isScheduled: Boolean
    - isCompleted: Boolean
}

class FocusSessionDTO {
    - id: Long
    - session: SessionDTO
    - courseId: Long
    - topicId: String
    - assignmentId: String
    - courseName: String
    - displayName: String
    - focusStart: LocalDateTime
    - focusEnd: LocalDateTime
    - elapsedSeconds: Long
    - plannedDuration: Long
    - status: FocusStatus
    - sessionType: SessionType
    - topicName: String
    - assignmentName: String
}

class StudyAnalyticsDTO {
    - id: Long
    - totalCompletedFocusSessions: int
    - totalFocusDuration: long
    - subjectBreakdown: Map<String, Long>
    - focusSessions: List<FocusSessionDetailDTO>
}

class FocusSessionDetailDTO {
    - id: Long
    - courseName: String
    - focusStart: LocalDateTime
    - focusEnd: LocalDateTime
    - elapsed: long
}

class ToDoListResponseDTO {
    - id: Long
    - overdue: List<SessionDTO>
    - today: List<SessionDTO>
    - tomorrow: List<SessionDTO>
    - upcoming: List<SessionDTO>
}

@enduml
